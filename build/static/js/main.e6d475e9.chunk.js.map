{"version":3,"sources":["App.js","index.js"],"names":["SimpleMarkdownRenderer","_ref","content","React","createElement","className","html","replace","includes","match","p1","dangerouslySetInnerHTML","__html","DISPLAY_MODEL_NAME","App","apiKey","setApiKey","useState","messages","setMessages","currentMessage","setCurrentMessage","isLoading","setIsLoading","error","setError","isConfigSet","setIsConfigSet","copiedIndex","setCopiedIndex","messagesEndRef","useRef","useEffect","storedApiKey","sessionStorage","getItem","current","scrollIntoView","behavior","handleStartChat","trim","setItem","handleSendMessage","useCallback","async","newMessage","role","updatedMessages","response","fetch","method","headers","Content-Type","body","JSON","stringify","userApiKey","ok","_errorData","errorData","json","parseError","status","Error","data","assistantResponse","message","prevMessages","slice","err","console","onClick","handleNewChat","title","PlusCircle","size","handleReset","removeItem","RotateCcw","AlertCircle","map","msg","index","key","copyToClipboard","text","navigator","clipboard","setTimeout","writeText","then","catch","Copy","ref","Loader2","value","onChange","e","target","onKeyPress","event","shiftKey","preventDefault","placeholder","rows","style","minHeight","maxHeight","disabled","Send","htmlFor","type","id","required","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e6d475e9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Send, RotateCcw, PlusCircle, AlertCircle, Loader2, Copy } from 'lucide-react';\nimport './App.css';\n\n// --- Simple Markdown Renderer Component (Placeholder) ---\nconst SimpleMarkdownRenderer = ({ content }) => {\n  // Handles basic markdown rendering\n  if (typeof content !== 'string') {\n    return <div className=\"text-sm whitespace-pre-wrap\"></div>;\n  }\n  let html = content\n    .replace(/\\*\\*(.*?)\\*\\*|__(.*?)__/g, '<strong>$1$2</strong>')\n    .replace(/\\*(.*?)\\*|_(.*?)_/g, '<em>$1$2</em>')\n    .replace(/^([*]|-) (.*$)/gm, '<li>$2</li>');\n  if (html.includes('<li>')) {\n      html = html.replace(/(?:^|\\n)((?:<li>.*?<\\/li>\\s*)+)/g, (match, p1) => `\\n<ul>\\n${p1}</ul>\\n`);\n  }\n  return <div className=\"text-sm whitespace-pre-wrap prose prose-sm max-w-none\" dangerouslySetInnerHTML={{ __html: html }} />;\n};\n\n// --- Helper function (formatMessagesForGemini) is NO LONGER NEEDED here ---\n// Formatting happens on the backend now.\n\n// --- Hardcoded System Prompt is NO LONGER NEEDED here ---\n// It's defined in server.js\n\n// --- Fixed Model Name is NO LONGER NEEDED here ---\n// It's defined in server.js\nconst DISPLAY_MODEL_NAME = 'gemini-2.0-flash'; // For display purposes only\n\n\n// --- Main App Component ---\nfunction App() {\n  // State variables\n  const [apiKey, setApiKey] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isConfigSet, setIsConfigSet] = useState(false);\n  const [copiedIndex, setCopiedIndex] = useState(null);\n\n  const messagesEndRef = useRef(null);\n\n  // Backend API URL (adjust if needed, especially for production)\n  // Using a relative path assumes the frontend is served from the same origin\n  // or a proxy is set up in development/production.\n  // Alternatively, use process.env.REACT_APP_BACKEND_URL or the full URL.\n  const BACKEND_API_URL = '/api/chat';\n\n  // Effect to load config from sessionStorage\n  useEffect(() => {\n    const storedApiKey = sessionStorage.getItem('geminiApiKey');\n    if (storedApiKey) {\n      setApiKey(storedApiKey);\n      setIsConfigSet(true);\n      setError(null);\n    }\n  }, []);\n\n  // Effect to scroll to the bottom of messages\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]);\n\n  // Handlers\n  const handleStartChat = () => {\n    if (!apiKey.trim()) { setError(\"API Key is required.\"); return; }\n    sessionStorage.setItem('geminiApiKey', apiKey);\n    setIsConfigSet(true);\n    setMessages([]);\n    setError(null);\n  };\n\n  // Updated to call the backend proxy\n  const handleSendMessage = useCallback(async () => {\n    if (!currentMessage.trim() || isLoading || !isConfigSet) return;\n\n    const newMessage = { role: 'user', content: currentMessage };\n    // Send the current message history PLUS the new user message\n    const updatedMessages = [...messages, newMessage];\n    // Optimistically update UI\n    setMessages(updatedMessages);\n    setCurrentMessage('');\n    setIsLoading(true);\n    setError(null); // Clear previous errors before sending\n\n    try {\n      // Call the backend proxy endpoint\n      const response = await fetch(BACKEND_API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        // Send the message history and the user's API key\n        body: JSON.stringify({\n            messages: updatedMessages, // Send the full history including the latest user message\n            userApiKey: apiKey // Send the API key from state\n         }),\n      });\n\n      // Check if the response from the *backend* is ok\n      if (!response.ok) {\n        let errorData;\n        try {\n            // Try to parse error message from backend\n            errorData = await response.json();\n        } catch (parseError) {\n            // Fallback if backend response isn't JSON\n             errorData = { error: `Backend server error: ${response.status}` };\n        }\n        // Throw error with message from backend or status code\n        throw new Error(errorData?.error || `Backend error: ${response.status}`);\n      }\n\n      // Parse the successful response from the backend\n      const data = await response.json();\n\n      // Expecting backend to return { message: \"assistant response text\" }\n      const assistantResponse = data?.message;\n\n      if (assistantResponse) {\n        // Add only the assistant response to the message list\n        setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: assistantResponse }]);\n      } else {\n        // Handle cases where backend response format is unexpected\n        setError(\"Received an unexpected response format from the backend server.\");\n         // Revert optimistic UI update if backend response is bad\n        setMessages(prevMessages => prevMessages.slice(0, -1));\n      }\n\n    } catch (err) {\n      console.error(\"API Call via proxy failed:\", err);\n      setError(`Error: ${err.message || \"Failed to get response.\"}`);\n      // Revert optimistic UI update on error\n      setMessages(prevMessages => prevMessages.slice(0, -1));\n    } finally {\n      setIsLoading(false);\n    }\n  // API Key is now needed in dependency array as it's sent in the request\n  }, [currentMessage, isLoading, isConfigSet, messages, apiKey, BACKEND_API_URL]);\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleNewChat = () => {\n    setMessages([]);\n    setError(null); // Clear errors on new chat\n    setCurrentMessage('');\n  };\n\n  const handleReset = () => {\n    setApiKey('');\n    setMessages([]);\n    setCurrentMessage('');\n    setError(null);\n    setIsConfigSet(false);\n    sessionStorage.removeItem('geminiApiKey');\n  };\n\n  // Updated Copy Button Handler with Error Feedback\n  const copyToClipboard = (text, index) => {\n    if (!navigator.clipboard) {\n        setError(\"Clipboard API not available. Please use HTTPS or localhost.\");\n        setTimeout(() => setError(null), 3000);\n        return;\n    }\n    navigator.clipboard.writeText(text).then(() => {\n        setCopiedIndex(index);\n        setError(null);\n        setTimeout(() => setCopiedIndex(null), 1500);\n    }).catch(err => {\n        console.error('Failed to copy text: ', err);\n        setError(\"Failed to copy message. Browser might have blocked it.\");\n        setTimeout(() => setError(null), 3000);\n    });\n  };\n\n\n  // --- Render Logic ---\n  // Setup Form\n  if (!isConfigSet) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-100 to-purple-100 p-4 font-sans\">\n        <div className=\"bg-white p-8 rounded-xl shadow-lg w-full max-w-md\">\n          <h1 className=\"text-2xl font-bold mb-6 text-center text-gray-800\">Local SEO Chat - SEO Hotspot Edition</h1>\n          <p className=\"text-sm text-gray-600 mb-4 text-center\">Enter your API key to start chatting.</p>\n          {error && ( <div className=\"mb-4 p-3 bg-red-100 border border-red-300 text-red-700 rounded-md flex items-center\"> <AlertCircle className=\"w-5 h-5 mr-2 flex-shrink-0\" /> <span>{error}</span> </div> )}\n          <div className=\"mb-6\">\n             <label htmlFor=\"apiKey\" className=\"block text-sm font-medium text-gray-700 mb-1\">Gemini API Key</label>\n             <input type=\"password\" id=\"apiKey\" value={apiKey} onChange={(e) => { setApiKey(e.target.value); setError(null); }} placeholder=\"Enter your Gemini API key\" className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition\" required />\n          </div>\n          <button onClick={handleStartChat} disabled={!apiKey.trim()} className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-200 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\" > Start Chat </button>\n          <p className=\"text-xs text-gray-500 mt-4 text-center\"> API Key stored in sessionStorage (potentially unsafe). </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Chat Interface\n  return (\n    <div className=\"flex flex-col h-screen bg-gray-50 font-sans\">\n      <header className=\"bg-white shadow-sm p-4 flex justify-between items-center border-b border-gray-200\">\n        <div className=\"flex flex-col\">\n            <h1 className=\"text-xl font-semibold text-gray-800 leading-tight\">Local SEO Chat</h1>\n            {/* Display model name used by backend */}\n            <span className=\"text-xs text-gray-500\">SEO Hotspot Edition ({DISPLAY_MODEL_NAME})</span>\n        </div>\n        <div className=\"flex space-x-2\">\n            <button onClick={handleNewChat} title=\"Start New Chat\" className=\"p-2 rounded-full text-gray-600 hover:bg-gray-100 hover:text-gray-800 transition duration-150\" > <PlusCircle size={20} /> </button>\n            <button onClick={handleReset} title=\"Reset Settings & New Chat\" className=\"p-2 rounded-full text-red-500 hover:bg-red-100 hover:text-red-700 transition duration-150\" > <RotateCcw size={20} /> </button>\n        </div>\n       </header>\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gradient-to-br from-blue-50 to-purple-50\">\n        {error && !isLoading && (\n            <div className=\"flex justify-center sticky top-2 z-10\">\n                 <div className=\"mt-2 p-3 bg-red-100 border border-red-300 text-red-700 rounded-lg flex items-center text-sm max-w-md shadow-lg\">\n                    <AlertCircle className=\"w-5 h-5 mr-2 flex-shrink-0\" />\n                    <span>{error}</span>\n                 </div>\n            </div>\n        )}\n        {messages.map((msg, index) => (\n          <div key={index} className={`flex group ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n            <div className={`relative max-w-xs md:max-w-md lg:max-w-lg px-4 py-2 rounded-xl shadow-md ${ msg.role === 'user' ? 'bg-blue-500 text-white rounded-br-none' : 'bg-white text-gray-800 rounded-bl-none border border-gray-200' }`} >\n              {msg.role === 'assistant' ? ( <SimpleMarkdownRenderer content={msg.content} /> ) : ( <p className=\"text-sm whitespace-pre-wrap\">{msg.content}</p> )}\n              {msg.role === 'assistant' && ( <button onClick={() => copyToClipboard(msg.content, index)} title=\"Copy message\" className={`absolute -top-2 -right-2 p-1 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-200 ${copiedIndex === index ? 'bg-green-500 text-white' : ''}`} > <Copy size={14} /> </button> )}\n            </div>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n        {isLoading && ( <div className=\"flex justify-center items-center py-2\"> <Loader2 className=\"w-6 h-6 text-blue-500 animate-spin\" /> <span className=\"ml-2 text-sm text-gray-600\">Assistant is thinking...</span> </div> )}\n      </div>\n      <div className=\"p-4 bg-white border-t border-gray-200\">\n        <div className=\"flex items-center space-x-2\">\n            <textarea value={currentMessage} onChange={(e) => setCurrentMessage(e.target.value)} onKeyPress={handleKeyPress} placeholder=\"Briefly describe the type of business you have and its location\" className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none resize-none transition\" rows=\"1\" style={{ minHeight: '40px', maxHeight: '120px' }} disabled={isLoading} />\n            <button onClick={handleSendMessage} disabled={isLoading || !currentMessage.trim()} className=\"p-2 bg-blue-600 hover:bg-blue-700 text-white rounded-full transition duration-200 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed\" title=\"Send Message\" > <Send size={20} /> </button>\n        </div>\n        <p className=\"text-xs text-gray-500 mt-2 text-center\">Local SEO Chat can make mistakes, double-check important results.</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}